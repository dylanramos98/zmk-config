/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        ComboLayer {
            bindings = <&mo 3>;
            key-positions = <37 40>;
            slow-release;
            timeout-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            //            | SHFT | LWR | SPC |   | BKSP | RSE | CMD |

            bindings = <
&trans  &kp Q           &kp W  &kp E    &kp R  &kp T              &kp Y     &kp U  &kp I          &kp O    &kp P           &trans
&trans  &kp A           &kp S  &kp D    &kp F  &kp G              &kp H     &kp J  &kp K          &kp L    &kp SEMI        &trans
&trans  &mt LEFT_ALT Z  &kp X  &kp C    &kp V  &kp B              &kp N     &kp M  &kp COMMA      &kp DOT  &mt RCTRL FSLH  &trans
                               &kp TAB  &mo 1  &mt LSHFT SPACE    &kp BSPC  &mo 2  &kp RIGHT_GUI
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |
            // | TAB |  !  |  @  |  #  |  $  |   | LFT | DWN |  UP | RGT |  '  |
            // |CTRL |  %  |     |     |     |   |     |     |     |     |  "  |
            //             | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL   &kp AT            &kp HASH           &kp DOLLAR            &kp PERCENT              &kp MINUS  &kp N7        &kp N8        &kp N9        &kp EQUAL  &trans
&trans  &kp CARET  &kp AMPERSAND     &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp UNDER  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp APOS   &trans
&trans  &kp TILDE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE          &kp N0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DQT    &trans
                                     &trans             &trans                &kp SPACE                &kp RET    &trans        &kp GRAVE
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC|  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |
            // |  `  |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |
            // |  ~  |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |
            //             | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp ESC   &kp HOME    &kp UP_ARROW  &kp PAGE_UP      &kp PAGE_DOWN    &kp CARET  &kp AMPS  &kp UP          &kp RIGHT_PARENTHESIS  &kp ASTERISK  &trans
&trans  &kp CAPS  &kp K_MUTE  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp END          &kp MINUS  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT              &kp BSLH      &trans
&trans  &trans    &trans      &trans        &trans           &kp DELETE       &kp UNDER  &kp PLUS  &kp LBRC        &kp RBRC               &kp PIPE      &trans
                              &caps_word    &trans           &kp SPACE        &kp RET    &trans    &kp RALT
            >;
        };

        combo_layer {
            bindings = <
&trans  &kp F1       &kp F2         &kp F3         &kp F4         &kp F5    &kp F6  &kp F7            &kp F8                  &kp F9             &kp K_SCREENSAVER  &trans
&trans  &kp LG(TAB)  &kp LC(LA(D))  &kp LC(LA(F))  &kp LC(LA(G))  &trans    &trans  &kp LS(LG(LEFT))  &kp LS(LA(LEFT_ARROW))  &kp RS(RA(RIGHT))  &kp LS(LG(RIGHT))  &trans
&trans  &trans       &kp LG(X)      &kp LG(C)      &kp LG(V)      &trans    &trans  &kp LEFT          &kp RIGHT               &trans             &bt BT_NXT         &trans
                                    &trans         &trans         &trans    &trans  &trans            &trans
            >;
        };
    };
};
