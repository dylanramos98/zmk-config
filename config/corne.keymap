/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        ComboLayer {
            bindings = <&mo 3>;
            key-positions = <37 40>;
            slow-release;
            timeout-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            //            | SHFT | LWR | SPC |   | BKSP | RSE | CMD |

            bindings = <
&trans  &kp Q  &kp W  &kp E      &kp R  &kp T        &kp Y     &kp U  &kp I      &kp O    &kp P     &trans
&trans  &kp A  &kp S  &kp D      &kp F  &kp G        &kp H     &kp J  &kp K      &kp L    &kp SEMI  &trans
&trans  &kp Z  &kp X  &kp C      &kp V  &kp B        &kp N     &kp M  &kp COMMA  &kp DOT  &kp FSLH  &trans
                      &kp LSHFT  &mo 1  &kp SPACE    &kp BSPC  &mo 2  &kp RGUI
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |
            // | TAB |  !  |  @  |  #  |  $  |   | LFT | DWN |  UP | RGT |  '  |
            // |CTRL |  %  |     |     |     |   |     |     |     |     |  "  |
            //             | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL   &kp AT         &kp HASH  &kp DOLLAR            &kp PERCENT              &kp MINUS  &kp N7        &kp N8        &kp N9        &kp DELETE  &trans
&trans  &kp TAB    &kp LESS_THAN  &kp GT    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp UNDER  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp APOS    &trans
&trans  &kp TILDE  &kp GRAVE      &kp AMPS  &kp ASTRK             &kp PERIOD               &kp N0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DQT     &trans
                                  &kp LGUI  &trans                &kp SPACE                &kp RET    &trans        &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC|  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |
            // |  `  |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |
            // |  ~  |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |
            //             | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp ESC    &kp HOME  &kp UP_ARROW  &kp PAGE_UP  &kp PAGE_DOWN    &kp CARET  &kp AMPS   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp ASTERISK  &trans
&trans  &kp CAPS   &kp LEFT  &kp DOWN      &kp RIGHT    &kp END          &kp MINUS  &kp EQUAL  &kp LBKT              &kp RBKT               &kp BSLH      &trans
&trans  &kt LCTRL  &trans    &trans        &trans       &trans           &kp UNDER  &kp PLUS   &kp LBRC              &kp RBRC               &kp PIPE      &trans
                             &caps_word    &trans       &kp SPACE        &kp RET    &trans     &kp RALT
            >;
        };

        combo_layer {
            bindings = <
&trans  &kp LG(LS(NUMBER_4))  &trans         &kp LC(LA(LG(LEFT)))  &kp LC(LA(LG(RIGHT)))  &kp LC(LA(LEFT_ARROW))    &kp RC(RA(RIGHT))  &kp LC(LA(RET))   &trans                  &trans             &kp K_SCREENSAVER  &trans
&trans  &kp LG(TAB)           &kp LC(LA(D))  &kp LC(LA(F))         &kp LC(LA(G))          &trans                    &trans             &kp LS(LG(LEFT))  &kp LS(LA(LEFT_ARROW))  &kp RS(RA(RIGHT))  &kp LS(LG(RIGHT))  &trans
&trans  &trans                &kp LG(X)      &kp LG(C)             &kp LG(V)              &trans                    &trans             &kp LEFT          &kp RIGHT               &trans             &trans             &trans
                                             &trans                &trans                 &trans                    &trans             &trans            &trans
            >;
        };
    };
};
